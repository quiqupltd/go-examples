package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/quiqupltd/go-code-generation/domain"
	model1 "github.com/quiqupltd/go-code-generation/graph/model"
	"github.com/rs/xid"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model1.ProductInput) (*model1.Product, error) {
	id := xid.New().String()

	newProduct := domain.Product{
		ID:    &id,
		Name:  input.Name,
		Price: int64(input.Price),
	}
	product, err := r.ProductsService.CreateProduct(newProduct)
	if err != nil {
		return nil, err
	}

	return &model1.Product{
		ID:    fmt.Sprintf("%d", product.ID),
		Name:  product.Name,
		Price: int(product.Price),
	}, nil
}

// GetAllProducts is the resolver for the getAllProducts field.
func (r *queryResolver) GetAllProducts(ctx context.Context) ([]*model1.Product, error) {
	products, err := r.ProductsService.Products()
	if err != nil {
		return nil, err
	}

	var resp []*model1.Product
	for _, p := range products {
		resp = append(resp, &model1.Product{
			ID:    fmt.Sprintf("%d", p.ID),
			Name:  p.Name,
			Price: int(p.Price),
		})
	}

	return resp, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
