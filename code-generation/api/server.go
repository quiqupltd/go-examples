package api

import (
	"fmt"
	"os"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/quiqupltd/go-code-generation/domain"
	"github.com/quiqupltd/go-code-generation/swaggerui"
)

// Recevies and echo instance and a domain service and sets up the echo server
// routes for the REST API, as well as swagger ui
func ConfigureServer(e *echo.Echo, domainSvc domain.ProductsService) error {

	// load swagger spec from static data in generated code
	swagger, err := GetSwagger()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error loading swagger spec\n: %s", err)
		os.Exit(1)
	}

	// Clear out the servers array in the swagger spec, that skips validating
	// that server names match. We don't know how this thing will be run.
	swagger.Servers = nil

	setupSwagger(e, *swagger)

	// Setup the recover middleware to catch panics
	e.Use(middleware.Recover())

	// Create a new instance of our API service (implementation)
	svc := NewService(domainSvc)
	// Create a new instance of the strict handler
	strictHandler := NewStrictHandler(svc, nil)

	// register the handler routes
	RegisterHandlers(e, strictHandler)

	return nil
}

// Using the swagger file generated by oapi-codegen, sets up the swagger
// spec endpoint and the swagger ui handlers, this is so that we can
// access /swaggerui and see the API documentation as well as execute requests
func setupSwagger(e *echo.Echo, swagger openapi3.T) error {
	// Override the servers for the spec endpoint to be the current server
	swagger.Servers = openapi3.Servers{
		&openapi3.Server{
			URL:         fmt.Sprintf("http://localhost:%s/", "8080"),
			Description: "Local server",
		},
	}

	// Convert the swager spec to json
	jsonData, err := swagger.MarshalJSON()
	if err != nil {
		return err
	}

	// Create and register the spec handler
	specHandleFn := func(c echo.Context) error {
		return c.JSONBlob(200, jsonData)
	}

	e.GET("/swagger.json", specHandleFn)

	// Register the swagger ui handlers
	swaggerui.RegisterHandlers(e)

	return nil
}
